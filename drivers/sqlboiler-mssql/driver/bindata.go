// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.921kB)
// override/templates/singleton/mssql_upsert.go.tpl (1.385kB)
// override/templates_test/singleton/mssql_main_test.go.tpl (3.945kB)
// override/templates_test/singleton/mssql_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.723kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\xc8\x11\x7f\x26\x3f\xc5\xc4\x28\x2e\x64\xab\xd0\xed\xab\x0b\x3d\xd8\x49\x2e\x35\xee\xec\xea\xa2\x4b\x03\xd4\x30\x8c\x15\x39\x94\x16\x5e\xed\x32\xcb\xa5\x64\x95\xe5\x77\x2f\x66\x77\x29\x92\xb2\x64\xcb\xb9\x73\x71\x0f\x81\x45\xee\x70\xe6\x37\xbf\xf9\xb7\x93\xba\x7e\x07\x7f\x62\x82\xb3\x12\xce\xc6\x90\x9c\xd3\x2f\x2c\x93\x5f\xd9\x4c\x20\xb8\x3f\xc9\x35\x5b\x62\xd3\x84\x56\xb4\x4c\x17\xb8\x64\xee\x98\x3e\xe8\x24\xe0\xbf\x90\x4c\xbb\x53\xfb\x01\xcf\x21\x39\xcf\xb2\x4f\x42\xcd\x98\x80\x77\x4d\x13\x9e\x9e\xc2\x97\xa2\x44\x6d\x3e\x01\x33\x06\x97\x85\x29\x81\x49\xe0\x92\xde\x8d\x80\xc9\x0c\x32\x85\xf6\x5d\x55\x64\xcc\x20\x28\x0d\x7c\x2e\x95\x46\x50\x12\x52\x25\x73\xc1\x53\x93\x84\x79\x25\x53\x88\x14\xfc\xb9\xae\x1d\xfe\xe4\x4b\x31\xe5\x72\x5e\x09\xa6\x9b\x26\x6e\xad\x44\x16\x84\x54\x06\x92\x6b\xf5\x5e\x49\x83\x0f\xa6\x69\x52\xf3\x40\xaa\xe8\x21\xf1\x2f\x47\x50\xd7\x28\x33\x02\xe9\x2d\xbf\x57\xa2\x5a\xca\x72\xe4\xc1\xf9\x47\x98\x29\x2e\x12\xff\x10\x03\x6a\xad\x34\xd4\x61\xa0\xd1\x54\x5a\x82\x4a\x9c\x61\x67\xb7\x6f\xd3\x7e\xf7\x09\xcd\x87\x8b\x28\xae\x6b\x14\x25\x5a\x1c\x23\x68\x0f\xbc\xa4\x3f\x97\x59\xd3\x8c\x9e\x44\x12\x87\x4d\x18\x6e\x41\x87\x8e\x6e\x22\xb0\x47\x39\xfd\x9c\x30\xc9\xd3\x1d\xf2\x27\xbf\x8d\x7d\xb0\x3a\x4b\x7a\x67\x09\x38\x3a\x1c\x93\xd7\x8e\x47\x1d\x06\x3c\x27\x50\x94\x9d\xff\xcf\x60\xfc\xdd\x1a\x7d\x33\x06\xc9\x05\xa1\x08\x0a\xa2\x28\xb2\xfa\xbe\x6a\x56\x7c\xd4\x3a\x42\xad\xe3\x38\x0c\x9a\x7d\x81\x3b\x10\xa9\x7d\x81\x82\xaa\xe4\x72\x4e\xcf\xf8\x80\x69\x65\x94\x7e\x49\xe1\xf4\x54\x17\xdf\x17\xc5\xc9\x63\x3e\x09\x88\xe3\xee\xa3\x87\xd4\x63\xf5\x71\x68\x3b\x71\xff\xaa\xf7\xd5\xf3\x5c\x1f\x1f\xf2\x3d\x79\xd6\xcf\x2b\x82\xf1\x7a\x61\xdd\x12\xfd\xbb\x87\xf0\xb8\x30\xfd\xb1\xa2\xb4\x6d\x94\x3c\x07\x05\xe3\x8e\x50\xdf\x38\xed\x79\x99\x5c\xe3\x3a\x3a\xa9\xeb\x64\x72\x3f\x77\x63\xe7\x0c\xa4\x82\xba\x1e\x8c\x22\x28\xb4\x5a\xf1\x0c\x33\xc8\x95\x86\xca\x7a\x7b\x62\x23\x10\x06\x34\xa5\x88\x6d\x41\xfc\x9d\x18\xbe\xc4\xd2\xb0\x65\x71\xe7\xa4\xee\x16\x28\x0a\xd4\x27\x90\x40\xe3\xa4\xbb\x2c\xf9\x87\x52\xf7\xa5\x0d\xdd\x20\x9f\x32\x75\x81\xb9\xd2\xe8\x48\xb5\x42\x47\x27\xd7\xe3\xf4\xe9\xbc\x25\xb8\x16\xad\xe5\x32\x0c\x03\xf9\x9f\x0f\x98\xb3\x4a\x18\x3b\x8a\xbf\x55\xa8\x39\x96\xc9\xb5\x92\xff\x46\xad\xfc\xd1\x14\x29\xac\x3e\xe8\x1f\xd4\x5a\x76\x61\xf7\x4c\x7f\xe5\x66\xe1\x85\x47\xa0\xe2\x30\x0c\x4e\x4f\xe1\xa2\xe2\x22\x83\x94\xa5\x0b\x84\x7b\xdc\x00\x97\xef\x04\x97\x08\xd5\x5c\x70\xb1\x81\x77\xb0\xdc\x94\xdf\x04\xac\x4a\x28\xe8\x6f\xa1\xd5\x4c\xe0\xb2\x0c\x83\x59\x95\x13\x98\xd2\xe8\x25\x93\x73\x81\xd4\x1a\x2f\xaa\x3c\x47\x1d\xc5\xf6\x34\xf9\xaa\xb9\xc1\xa9\xd1\x5c\xce\xa3\xd2\xe8\x54\xc9\x55\x72\x69\x14\x8b\x06\xb9\x91\xfc\xc4\x65\x46\x45\x42\x01\xbb\x1b\x41\x4a\x5a\x35\x93\x73\x1c\xe6\x10\xe5\x4b\x69\x89\xda\xd5\x9d\xda\xf8\x76\xaf\x2f\x36\x06\xa3\xb7\xc9\xdb\xe7\x60\x0c\x72\xf2\x09\x18\x43\xb9\xef\x81\xf1\x58\x67\x2f\xa2\x4f\xe8\xa2\x80\x9c\x8d\x81\x4e\xfd\x41\x1c\x06\x1d\xe3\x93\xaa\x65\x7c\x56\xe5\xb1\xcd\xd9\xbd\xf1\x77\xf9\xf9\x9e\x62\x7c\x55\x99\xe4\xf3\xcf\x2a\xbd\x27\x4d\x36\xea\x23\x17\xfc\x8c\x0c\x3d\xff\xfd\xcd\x3d\x6e\x6e\x8f\x36\xf4\x45\x0a\x67\x2a\x0c\x56\x4c\xdb\x84\xb7\xc5\x1c\xda\x3a\x7a\xe3\x0d\x13\x01\xed\x3d\x43\xa3\x21\x20\x43\xca\x2f\x7b\x4f\x94\xe6\x61\x10\x1c\x42\x70\x2e\x44\xdb\x73\x9e\x90\xda\x53\x10\xc7\x49\xab\xca\xf4\x3f\xe8\xa2\x48\x8f\xf1\xd6\x0f\xe8\xd7\xc5\x94\xae\x0c\xcb\x42\xe0\x12\xa5\x89\x5a\x47\x9f\xb7\x75\x5e\x19\x45\x2a\x29\x79\xf8\x08\x56\xbb\x09\x69\x79\x23\x1e\x3b\x53\xd4\x70\x18\x97\xe5\xb9\xdc\x1c\xea\x05\x13\xcd\x97\x4c\x6f\x7e\xc2\xcd\xb6\x37\xaf\x62\xf8\xe1\x87\x97\x69\xd9\xd7\x51\x56\xb1\x43\xd4\x71\xc0\x8a\x02\x65\xe6\x5d\xbe\x39\xe3\xb7\xed\x1c\xb8\xe1\x7f\xf9\xdb\xd9\x6d\x92\x24\xe4\x1f\x25\xba\xfd\xc7\x73\x10\x28\xbd\x78\x4c\x83\xe0\xaf\x4e\xe3\xb3\x73\xa0\x92\x76\xeb\x30\xca\x77\xfc\xdd\xa9\x30\x82\x54\x55\x22\xb3\x7d\x79\x66\x1b\x9e\xc7\x98\x5a\x3f\x40\xf0\xd2\x4e\x09\x3b\x26\xc8\xdc\x6e\x00\xaf\x50\xcf\x31\xd2\xf8\xa2\xc0\xfd\x56\x3d\x9e\x59\xaa\x9e\xc0\x4f\xfd\xb3\xf1\x4e\x53\xfc\xd2\x7b\xfa\x5d\x4a\xe3\x71\x7e\xf8\xcc\xf6\x08\x0e\x67\xb6\x13\x38\x9e\x20\x17\xf1\x37\x43\x7f\x2e\xcb\x6b\x25\x31\xb2\x19\x49\xc9\xe0\x4e\x5f\x39\x19\xbc\x6b\x7b\x93\xc1\xf6\xa8\x84\x46\xee\x06\xc6\x4e\xde\x75\xb9\x5f\xe8\xd5\xd5\x74\xfa\xcb\xcf\x51\xc6\x99\xc0\xd4\x8c\xe0\xa4\xae\xfb\x6b\x70\xd3\x9c\x1c\xa4\x63\x4f\x1d\xb6\x04\xf6\x7a\xa1\x65\x69\xbd\xe0\x06\x09\x15\x85\x7f\xc9\xee\x31\xba\xb9\x2d\xed\x38\x18\x59\x8e\x8e\xb5\x40\xd3\x2d\x48\x55\xb1\x89\xb6\x1a\x8f\x87\x17\x0f\x80\x6c\x6b\xbb\xa7\xc9\xc1\xf7\x45\xfd\xb4\xa8\xf3\xd0\x8a\x6e\x29\x5e\x31\x51\xe1\x15\x2b\x0a\xeb\x17\x8d\x8a\xee\xa6\x73\xc1\x65\xe6\x8f\x0e\x79\xfb\xeb\xa6\x38\x9c\x7b\x5b\xb5\x5b\x0c\xb1\xcb\xbe\x9d\x2b\xd8\xe0\x0e\xd6\xef\x49\x14\x0a\x12\xf4\x39\xe8\x10\x6b\x34\xaf\x8d\xd7\xa6\x40\xb0\x17\xea\x10\x6b\xdb\x44\x1b\x3b\x6a\x45\x65\x5b\x85\xc6\x9c\xf2\x32\xb9\x94\x19\xd7\x98\x9a\xa8\x7d\xf1\x2f\x92\xf8\x67\x1e\x29\x4a\x89\x15\x13\x83\x6b\xa5\x3d\x2c\x7f\xd4\x6a\xd9\xba\x60\x15\xfa\x7b\xc2\x20\x4e\xb1\x9b\xeb\x0e\x49\x09\x37\xb7\x5c\x1a\xd4\x39\x4b\xb1\x76\x57\x65\xe2\x6e\x97\xac\x1e\x91\xed\x87\x9d\xf1\x89\xd1\x87\x4d\xf7\x74\xb4\x37\xfa\xc1\x1a\xb3\xbd\xa1\xdb\xfd\xe2\x03\xce\xaa\xf9\x95\xca\xd0\x9a\xca\x97\x26\xf9\xb1\xd0\x5c\x1a\x21\xa3\xee\xdc\x5e\xba\x74\x6b\xc0\x96\x79\xfc\xbc\x34\x51\x16\xfb\x5b\x3a\x6d\x49\x43\xc3\x97\xa5\x15\x8e\x52\xf3\xe0\x46\xe2\xda\x7e\x66\x6f\x72\x3b\xaa\xc8\x55\x2b\xb7\x6b\x73\x7d\x04\xae\xf5\x3e\x34\xed\x8a\x79\x04\xfb\x7b\xd9\x0b\x5c\x26\xd3\x8a\x92\xd8\x16\xf7\x59\xad\xa3\x1e\x0a\x67\x8e\x4a\x37\x99\xa6\xcc\x56\x06\x85\xd0\x97\x7d\x9f\x8e\x7d\x9a\xbc\xa9\xc8\x2e\x44\x2f\xd1\xea\xdd\xda\x56\xc2\x78\x0c\xe5\x37\x91\x7c\xd4\xfa\x5a\x7d\x56\x6b\x77\x8b\xf6\x16\xa9\x44\x4e\x4f\xc1\xf6\x66\xbb\x36\xcb\xb7\xc6\xe7\x28\x30\xb9\x31\x0b\xda\xaf\xd7\x0b\x94\x60\x16\xa8\xf1\x6d\x49\x7b\xa4\xeb\x5e\xbe\x88\xc0\x7a\x71\x98\xa3\xbb\xb6\xe0\xad\x73\xb4\xfb\xee\xa7\x68\x97\x91\xc7\xdf\x3d\x4f\xc8\xd0\xff\x6e\x03\xdd\xbb\x39\xd2\x48\xfc\xaa\x59\x11\xa1\xd6\x76\x1c\xbd\x64\x30\xb6\x7b\xf2\xce\xd5\xfc\xb8\xbb\x7e\xbb\x53\x1c\x21\x6e\x77\x08\x18\x3b\x77\x8f\x36\xb0\xdd\x25\x82\x27\xb6\xf3\xed\x7f\xb5\x66\xea\x3c\x37\xa8\xbf\x6b\x33\xf7\xbb\xf7\x36\x6c\x5e\xa9\xe4\xa2\xbf\x95\x37\xe1\xff\x02\x00\x00\xff\xff\x8d\x76\x7d\x11\x21\x17\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x5a, 0x66, 0xe6, 0xd9, 0x6b, 0x35, 0xfd, 0x39, 0xa6, 0x4b, 0x6, 0x12, 0x46, 0xd4, 0x7a, 0x27, 0xf9, 0xeb, 0x17, 0x59, 0x9b, 0x95, 0xa5, 0xe6, 0xf2, 0xcd, 0x3f, 0xa2, 0x5d, 0xbb, 0x6a}}
	return a, nil
}

var _templatesSingletonMssql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xda\x40\x14\x3c\x7b\x7f\xc5\xab\xa5\x48\x5e\x65\xe5\x34\xd7\x46\x54\xa2\xc1\x4d\xa8\x88\x81\xd8\xb4\x07\xc2\x61\xc1\xcf\x64\x25\xb3\xa0\xfd\x40\x8d\xaa\xfc\xf7\xea\xd9\xa6\x40\xf0\xa9\x17\xf0\xbe\x8f\xd1\xec\xcc\xd8\x37\x37\xb0\xf4\xaa\x2a\x66\x3b\x8b\xc6\x4d\x3d\x9a\xb7\xa7\x2c\x9b\x8e\x9a\xaa\x05\x09\x74\xb0\x4e\x3a\xdc\xa0\x76\x60\x9d\x51\x7a\x0d\xde\xd2\xaf\x7b\x45\xf0\xf5\xe2\x40\x3a\x09\x3b\xb3\xdd\xab\x02\x8b\x98\x95\x5e\xaf\xba\x71\xa3\x42\x49\x28\x8c\xda\xa3\xb1\xf1\x40\xc9\x0a\x57\x4e\x80\x93\xcb\x0a\x53\xb9\xc1\x16\x5f\xc0\xce\xa8\x8d\x34\x6f\x02\xfc\xae\x90\x0e\x05\x28\x4d\x40\x30\x5f\x1c\x26\xb6\xde\xed\xfc\xb1\xc0\x0f\xd4\xfe\xb0\xa0\x9d\xed\x51\x69\x23\xf5\xba\xc2\x78\x58\xa0\x76\x53\xbf\x75\x98\x55\x6a\x85\x44\x23\x1e\x4d\x05\xd0\xff\xf3\xf4\x00\xcf\x19\x0b\x96\xbe\x84\x2f\xa7\xab\x0f\xe8\xbe\xf9\xb2\x44\x13\x71\x16\x14\x58\xa2\x39\x69\x4e\xfc\xa1\xb9\xf4\x25\xad\x5b\x27\x8d\x1b\xea\x02\x7f\x13\xca\x2d\x63\x41\xb9\x71\xf1\xf7\x9d\x51\xda\x95\x34\x24\x20\x7c\x4a\x9e\x1f\x12\x18\xa6\xf9\x18\xae\x2c\x48\x0b\x73\xb7\x78\xd1\xe1\x89\x0e\xbc\x6b\x6d\x96\x0d\xd3\x07\x88\xb2\x64\x94\xdc\xe7\x70\x65\x79\xbd\x6a\x17\x10\xcd\xaf\xec\x82\x13\x02\x0b\x82\x13\x6e\x95\x5c\xe1\xeb\xb6\x2a\xd0\xd8\xfa\xc2\x33\x8b\x35\xb3\xd3\x86\x80\x0a\x75\xd4\xca\xcd\x05\x1c\xf9\x0b\xb8\xe5\x2d\xa0\xd2\x6b\x1b\xff\xd8\xaa\x7f\x83\xa2\x55\x3b\x6a\xf4\xe3\xd7\xa1\x08\xaf\x4f\x4a\xa3\x29\xe7\x67\x77\x68\xaf\x30\x4e\x21\x0a\xa9\xb1\x35\xa0\x04\xec\x49\x23\x23\xf5\x1a\x0f\x86\x93\x7d\x81\x2a\x41\xc1\xa7\x1e\x7c\xae\x4f\x97\x28\xd0\x4f\x07\x40\x30\xc1\x3b\x0b\x3a\x84\x9a\xdb\x45\x4c\x92\x40\x8f\x94\xad\x1f\x43\x01\x7b\x01\x7b\xce\x68\xe5\x02\x90\xb4\xfb\x60\xde\x75\xef\x4c\x18\xc6\x88\x15\x55\x9a\x40\x72\xf8\xda\xd2\xbb\x00\xfb\xf5\x98\xa4\xf0\xd4\xcf\xef\x1f\x93\x01\xe4\x74\xa8\xa9\x76\xf8\x39\x19\xf4\xf3\x04\xb2\x84\xcc\xac\xfd\x3f\x7a\x97\xa1\x9b\x48\x23\x37\x14\x06\x1b\x9d\x2b\xfb\x51\xfc\x73\xd3\x5a\x7e\xc4\xb8\xe3\x3e\x6d\x97\x64\xe8\xd0\xa1\xa6\x9e\x8e\xf3\x4b\xfa\x97\xec\x87\x69\x96\x3c\xe7\x10\x51\x0e\x7f\xf6\x47\xb3\x24\xab\x9f\xc3\x8b\xc8\x34\xaf\x96\x80\x90\x84\xfe\xef\x84\xb6\x2f\xe8\xc7\x80\x9e\x18\xd3\x7c\x10\xba\x8c\x39\x50\x7e\xd1\xe3\x59\x3e\x99\xe5\xd0\x70\x4f\x06\x75\x34\xee\xc2\x83\xa0\x2d\xe1\x06\x48\x40\xb8\x10\xc7\xc1\x90\xf2\xfc\x0e\x58\x59\xec\xb6\xfd\x2e\x6c\x55\x35\xe8\xbc\xd1\xb0\xf4\x65\x9c\x35\x3e\x71\xf6\xce\xfe\x06\x00\x00\xff\xff\x96\xf9\x01\xfb\x69\x05\x00\x00")

func templatesSingletonMssql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonMssql_upsertGoTpl,
		"templates/singleton/mssql_upsert.go.tpl",
	)
}

func templatesSingletonMssql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonMssql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/mssql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4a, 0x50, 0x8e, 0x29, 0xf7, 0x61, 0x7e, 0xea, 0xd, 0xbf, 0x2, 0xf3, 0x59, 0xc, 0x2b, 0x7e, 0xbc, 0xf6, 0x6e, 0x16, 0xab, 0xd5, 0x9f, 0x3a, 0xbc, 0x5b, 0x1f, 0x52, 0xbf, 0xfe, 0xd5, 0x3}}
	return a, nil
}

var _templates_testSingletonMssql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xed\x53\xdb\x36\x18\xff\x6c\xff\x15\x4f\x73\xd7\xd6\x66\x9e\x68\xd7\xdd\x3e\xd0\xcb\xf5\xf2\x62\x5a\xae\x24\x81\x38\x5b\xb7\xa3\x0c\x94\x58\x06\x1d\xb6\x64\x24\x19\x9a\x31\xfe\xf7\x9d\x24\xdb\xb1\xd3\x24\x85\x4f\xe3\x4b\xd0\xa3\xe7\xf5\xf7\xbc\xc9\x77\x58\x80\xb8\xfa\x36\x8a\xa2\xd3\xe3\x1b\xb2\x84\x2e\x08\x72\x45\xbe\xe5\x68\x54\x48\x35\xe0\x59\x4e\x53\xe2\x5d\x7a\x1f\x32\xff\xef\xde\xf1\x2c\x9c\xc2\xac\xd7\x3f\x0e\x01\xed\xf5\x86\xc3\xaf\xf2\xa7\xc1\x64\x1c\xcd\xa6\xbd\xa3\xf1\x0c\xd0\x1e\x1c\x4e\xa6\xe1\xd1\xc7\x31\x7c\x0e\xff\x42\x7b\x1f\xd0\xde\x57\xf6\x61\x1a\x1e\x86\xd3\x70\x3c\x08\x23\xb4\x77\xe9\xbb\xae\x5a\xe6\x04\x32\x29\x6f\xd3\x19\x91\x8a\x08\x90\x4a\x14\x0b\x05\x0f\xae\x13\xcf\x07\x9c\x31\xd0\x7f\x7b\xf2\x36\x45\xc3\xbe\xa6\x8d\x71\x46\x0c\x4d\x2a\x41\xd9\x95\xeb\x5c\x73\xa9\x00\x5a\xa4\x42\x12\xb1\x46\xca\xb1\x94\x6b\x24\x29\xd3\x8c\xc7\xa4\xc5\xc5\x45\xa5\x8b\x32\xe5\x3a\x8a\x48\x35\xec\x1b\x93\xb5\xd4\x0d\xcd\xa3\xd3\xe3\x41\x16\xc3\x9c\xf3\xd4\x7d\x74\xdd\xa4\x60\x0b\xa0\x8c\x2a\xcf\xb7\x7e\x8f\x30\x65\xd0\x85\x57\x8d\xb8\x1e\x1e\x6b\x4e\x2f\x83\xbd\xc6\x8d\x0f\x92\xa8\x22\xf7\x7c\x20\x42\x70\xa1\x35\xe8\x24\x10\x21\x2c\xc1\x75\x9d\x3b\x9a\x13\x81\x22\xa2\x86\x24\xc1\x45\xaa\xbc\x8e\x91\x47\x72\x71\x4d\x32\xdc\x09\xa0\x13\xcf\x79\xc7\xdf\xc1\x68\x43\xd5\x9c\x4a\x14\x64\x17\xab\x86\xa0\x13\xc0\xdb\x5f\xdf\xbd\xf3\x5d\xd7\xc9\x50\x09\x79\x17\xac\xc4\x47\xa2\x22\x03\x45\x25\x10\xcf\x19\xce\x8c\xca\x0c\x99\x5c\x6c\xe5\xd4\xb7\x96\xcf\x24\x68\x2b\x9f\xbe\xb5\x7c\x26\x6b\x5b\xf9\xf4\x6d\xc9\xa7\xf3\xd6\xe0\x3b\x62\xed\x78\x0c\x53\x95\xef\xad\xfa\x2a\x94\x0c\x77\x23\xf5\x5b\x05\x34\x4f\x33\xfc\x46\x6d\x34\x64\xfa\x9c\xa7\xb5\x89\x1b\x9a\xcb\xdb\x74\x91\xc5\x1d\x8d\xae\x4e\x72\x17\xee\x70\x8a\x51\x9f\x5c\x51\xf6\x07\x4e\x69\x8c\x15\xe5\xcc\xf3\x51\x79\x20\x9e\xeb\x38\x86\xc5\x1a\x1f\x73\x15\x66\xb9\x5a\x7a\x3b\xd1\x0b\xa0\x7d\x7c\x9e\x0e\x9b\xa9\x5a\x47\x79\xac\x74\x8c\xb9\xf2\xcc\x3f\xe1\x6d\x81\x53\xe9\x6d\x87\x3d\x80\x37\xb5\x12\x4b\x79\xae\x27\x15\xbc\xb5\x9a\x9a\xf0\x3c\x3d\x75\x6e\x6b\x45\x2b\x8a\xeb\xf8\x68\x70\x4d\x16\x37\x9e\xce\x09\x4d\x4c\xef\xbd\xe8\x02\xa3\xa9\xee\x46\x47\x10\x55\x08\xa6\xa9\xae\xf3\xe8\xba\xce\xfe\x3e\x0c\x04\xc1\x8a\x00\x06\x81\x59\xcc\x33\xfa\x0f\x89\x21\x9e\x83\x76\x0d\x19\x15\x29\x61\x5e\xb3\x88\x7c\xe8\x76\xe1\x8d\x51\xb7\x56\x5b\xb5\x06\x14\x29\x3c\x4f\x89\xbd\xf0\xaa\xc6\xf3\xad\x4d\x9a\xc0\x8b\x56\x81\x69\x4d\xa5\xab\x5d\xc8\x50\x2c\x78\x3e\x33\x6a\x3d\xff\xfd\x7a\x00\xad\x08\x9c\xc7\xb6\xe4\xc2\x84\xf2\x64\x59\xd7\x71\xac\x84\x76\xe2\xa0\x0b\xe4\x1b\x59\xa0\x01\xcf\x32\xcc\x62\xaf\x53\xd6\x76\x00\x9d\x9f\xa3\x4e\x00\x76\x22\xe8\xd3\xef\xe6\xa4\x8b\x51\x9f\x4e\xcc\x49\xf7\xaf\x3e\xc5\xe6\xd4\xc0\x4a\x1b\x49\x02\xe3\xc9\x41\x17\xb8\x44\x93\x9c\x30\xaf\x63\xe0\x91\x17\x76\xea\x21\x79\x9b\xea\xae\xdb\x90\xaf\x86\xcb\x5c\x48\xf4\x45\xe0\xdc\x23\x42\x1b\x4e\x30\x4d\x49\x0c\x8a\x03\xcf\x09\x83\xef\x14\x42\x42\x53\xd3\xcb\x36\xd0\x98\x24\x44\x80\x1e\xda\x7a\xb2\xc3\x05\x74\x21\x41\x83\x94\x4b\xe2\xf9\xf0\x68\xaa\xc5\x91\x2a\x2e\xfd\x7c\x35\x5f\x2a\x22\x51\xbf\x48\x12\x33\xef\x1b\x40\xa1\x48\xc5\x66\x25\x30\x72\x7f\xf8\x99\x2c\x87\x44\x2a\xc1\x97\x44\x78\x8d\x5d\x1b\x40\xe2\xaf\x0b\xd9\x24\x59\x1b\x6e\x33\x6f\x4d\x2e\x2c\xd4\xee\xc4\x6d\x45\x41\x6a\x59\xb0\x49\x83\x85\x4d\xe2\x2a\xfc\x0d\xc6\xbe\x60\xba\xd1\x56\x92\x29\x74\x22\x28\x53\x29\xd3\x46\xfc\x75\x9a\x8d\xa0\xec\x55\xcf\xf7\x9f\xe8\xdf\x3d\xa6\x0a\x12\x2e\x36\xbb\x68\xbc\x2c\xb5\x30\x9a\xee\x58\xb0\x32\x1d\xf1\x98\x78\x66\xfc\xdb\x45\xee\x97\xbf\xda\x7d\x79\x4f\xd5\xe2\x1a\xcc\xed\x83\xeb\x2c\xb0\x24\xe5\x9e\x3c\x58\x75\xbf\x25\x54\xb7\x09\x4e\x65\xfb\xda\x52\x5c\x5d\x33\x7a\x9d\x36\xaf\x62\x2a\x75\xa1\x75\xb4\xc3\x5b\x7d\x6c\xb7\xe1\xea\x2d\xa0\xab\xf2\xa0\x0b\x1a\xcc\x28\xd7\x68\x26\xde\xa5\xeb\x0c\xa6\x61\x6f\x16\xc2\xb0\x37\xeb\xf5\x7b\x51\x08\x2f\xe5\x7b\xd7\xf9\x38\x71\x1d\xfb\x28\x5b\xd1\xcf\xde\x9e\x4b\xd7\x89\xc2\x19\x4c\xc3\xde\xf0\x62\x30\x19\x8d\x8e\x66\xb3\x70\x78\x11\x8d\x7b\x27\xd1\xa7\xc9\x0c\x26\x63\x23\x7a\xb9\xde\x83\x95\xfb\x19\x12\x05\x1b\x64\xb1\x27\x6f\xd3\x00\x9e\xdf\xe1\xfe\xf6\x98\x9b\x43\x6b\x15\xf1\xfe\x3e\x44\x94\x2d\x08\x8c\x22\x88\x4e\x8f\xe1\x97\x37\x6f\x7f\x03\xaa\x60\x81\x19\xcc\x09\xc4\x9c\x11\xb8\xa7\xea\xda\x70\x0e\xa7\x93\x93\x55\xb8\x67\x70\x74\x08\xe1\x9f\x47\xd1\x2c\x82\x73\x78\x80\x18\x2b\x3c\xc7\x92\x5c\xe8\xc1\x0c\xff\xae\xce\x92\xe1\x5c\x5e\x73\x65\x2f\x1e\xe1\x0c\x02\x84\x10\x83\x73\x38\x7b\x7f\xbe\x0d\xf4\x5a\xb7\x17\x85\xc7\xe1\x60\x66\xc6\x3d\x1c\x4e\x27\x23\x90\x4b\x89\x2a\xe5\x12\x5c\xc7\xf9\xf2\x29\x9c\x86\x96\xa1\x0b\xaf\x5f\xca\xd7\xba\x64\xdb\xce\xbe\x94\x1b\x70\xff\x1f\xb2\xa0\x08\x16\x31\xbf\x67\xcd\x1c\xd0\x44\xef\x14\xfb\x00\x6f\xf4\x79\x45\xab\x86\xe0\x8f\x77\xd3\xc1\xf3\x97\xd3\x53\xbb\xba\x02\x44\x8f\xd6\xa0\x1a\x0d\x65\x5b\x07\x80\xc5\x95\x04\x84\x50\xd5\xee\x75\x68\x8b\x0d\x7b\xab\x14\xb6\x52\x08\x21\xdf\xb0\xd5\x53\xdb\xea\x90\x68\x4c\xee\xa7\x04\xc7\x44\x58\xa3\x7a\xfe\x4b\x15\xf3\x42\x6d\x1c\xff\x3b\x36\x43\xa9\x5c\x4b\x9a\xe9\xce\x0b\x55\x13\x5b\x23\xbf\x01\xa3\xbe\x9e\x16\x6c\x03\x82\xcd\x41\x5b\x0d\x4f\x51\x30\x46\xd9\xd5\x41\xa7\x46\xc6\x06\xe7\xbb\xdf\x0d\x66\x5e\xa8\xd6\x60\xfe\xc1\xdc\x5e\x7f\x0d\x3d\x25\x55\x0b\xce\x74\x79\x79\xe5\x77\x5c\x60\xb3\xe1\xef\xa8\xb4\xba\xec\xed\x55\x60\xf4\x1b\x7b\xed\x8f\x23\x67\xc5\x51\x02\x77\x9b\x96\xcf\x05\xe3\x41\x27\x80\x58\xd0\x3b\x22\x90\x59\xb3\xfd\x82\xa6\xf1\x69\x41\xc4\xb2\x0c\xa9\xea\x95\xea\x35\xb2\xde\x8b\xb6\xaf\xec\x17\x86\xfe\x2d\x5f\x8d\x1a\x89\xad\x0f\x45\x46\xd3\xe0\x3b\x7c\xda\x91\x3c\xba\xff\x05\x00\x00\xff\xff\x68\x86\x33\x94\x69\x0f\x00\x00")

func templates_testSingletonMssql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_main_testGoTpl,
		"templates_test/singleton/mssql_main_test.go.tpl",
	)
}

func templates_testSingletonMssql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x48, 0x72, 0x18, 0x21, 0xc4, 0x79, 0x4b, 0x1c, 0xde, 0x6, 0x5c, 0x37, 0xfb, 0x48, 0xf1, 0x61, 0xfd, 0x28, 0x9e, 0x5e, 0x56, 0x88, 0xbf, 0x7b, 0xc0, 0xb4, 0x66, 0x57, 0x69, 0xe0, 0x87}}
	return a, nil
}

var _templates_testSingletonMssql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonMssql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonMssql_suites_testGoTpl,
		"templates_test/singleton/mssql_suites_test.go.tpl",
	)
}

func templates_testSingletonMssql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonMssql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/mssql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x4d\x6f\xdb\x30\x0c\x3d\x5b\xbf\x82\x0b\xb6\x41\x1e\x5c\x15\xbb\x76\xc8\x21\xfd\x38\x14\xc3\x82\xa0\x71\xce\x83\x6a\xd3\xa9\x10\x45\x32\x24\x7a\x49\x66\xe8\xbf\x0f\x92\xd3\x36\x6d\xda\xa1\x87\xed\xd0\x43\x62\x4b\x78\x7c\x8f\x7c\x24\xdd\xf7\x27\xf0\x51\x6a\x25\x3d\x9c\x8d\x41\x4c\xe2\x1b\x7a\x51\xca\x5b\x8d\x30\x3c\xc4\x54\xae\x31\x04\xd6\x74\xa6\x02\x42\x4f\x7d\x3f\x44\x88\x45\x3b\xd3\x9d\x93\x3a\x84\x45\xeb\xd1\x11\x27\xf8\x12\x01\xca\x2c\x45\x99\x43\xcf\x32\x12\x33\xe9\xa4\xd6\xa8\x79\xce\x58\xa6\x1a\xd0\x68\xf8\x03\xc1\xa5\xdd\x98\xb9\x32\xcb\x4e\x4b\x17\xc2\x44\xeb\x0b\xab\xbb\xb5\xf1\x39\x8c\xc7\x7f\x43\xce\x9c\x5a\x4b\xb7\xfb\x8e\xbb\x87\x80\x9e\x65\x19\x89\xf9\x4a\xb5\x7c\x14\xff\x5b\x65\x96\x40\xa9\x8c\x8d\xa2\x3b\xb0\x46\xef\xa0\x1d\xe2\x60\x85\x3b\xa8\x86\xc8\x51\xce\xb2\xc0\x58\xe6\x11\xeb\x68\x81\x93\xa6\xb6\x6b\xf5\x1b\xc5\x14\x37\x73\xc4\x9a\xe7\x2c\xfb\x25\x1d\xa0\x4b\x3f\xeb\x58\x76\x7a\x0a\x13\x22\x5c\xb7\x04\x74\x87\x70\x3d\x9d\x5f\xdd\x94\xe0\x55\x8d\x60\x1b\x90\x06\x16\xb3\x78\xc3\x32\x1b\x19\x0f\xec\x7a\xac\xa0\x0f\xc9\x8d\x48\x7a\xa8\x39\x27\xd7\x55\xc4\x63\x32\x05\x7c\xb6\x05\xbc\x62\xc0\xe5\x79\xb9\x6b\xd1\x17\x40\xae\xc3\xfc\x5b\xe2\xf9\x30\x06\xa3\xf4\xde\x88\xab\x98\x69\xc3\x47\x0b\x93\x2c\x20\xfb\x28\xf2\x72\x42\xe0\x93\xf4\x19\x7c\xf2\xa3\x22\xf2\xed\x7d\xe9\x7b\xd5\x80\xb1\x04\x62\x6a\x2f\xac\x21\xdc\x52\x08\x15\x6d\x63\x65\xd5\x70\x16\xe7\xb2\x5a\x2d\x9d\xed\x4c\xcd\xf3\xbe\x47\x53\x87\xc0\xb2\x01\xf2\xa3\xf3\x54\x6e\x79\x62\x39\x64\x38\xba\xb8\xb5\x4a\x8b\x73\x5c\x2a\x93\x38\xb4\xc7\xc3\xbb\x72\xcb\x2b\xda\x16\xb1\xc0\x7b\x85\x37\x81\x72\x96\xd5\xd8\xa0\x83\x38\xbc\x3c\x87\x1e\x7e\xc2\x18\x68\x2b\x6e\xac\xd6\xb7\xb2\x5a\xf1\x1c\x42\xec\xf0\x43\x2f\xac\xd8\xcf\xf2\x6b\x85\xc7\x9e\xa0\xa9\xe1\x24\x04\x88\xa7\xa4\x7f\x6d\x1a\x74\x3c\x7f\x7a\x7a\x5b\x5f\xba\x24\xf7\x72\x53\x8e\xba\x51\xd9\xce\x50\xba\x78\x36\x59\xf7\x8b\xc8\x73\x71\x11\x31\x6f\x4c\xff\xb1\xf2\xe3\x2c\xf9\xbd\x6c\x84\x24\xe1\x08\xfa\xfa\x04\x32\xda\x48\x43\x60\x0d\x82\xc3\xca\xba\xba\x80\xa5\xa5\xb3\x51\x31\xe0\xf7\x49\x3f\x5b\x97\xc5\xec\x72\x52\x5e\xbd\xb4\x2e\xff\x62\x21\x1a\xa9\x3d\xbe\x0a\x3b\xfa\x70\x08\x21\xfe\xeb\xfa\xbc\xbf\xb9\x7a\x27\x63\x15\xd8\x9f\x00\x00\x00\xff\xff\xf6\x71\x76\xb4\xbb\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0xe3, 0xe8, 0x1e, 0xc3, 0xef, 0x74, 0x5d, 0xf, 0xf2, 0x30, 0xa1, 0x6, 0x82, 0x8f, 0x70, 0xe4, 0xb, 0xca, 0x51, 0x16, 0xa2, 0x3d, 0x8f, 0x40, 0x59, 0xec, 0xfe, 0x96, 0x39, 0x2, 0x36}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                        templates17_upsertGoTpl,
	"templates/singleton/mssql_upsert.go.tpl":           templatesSingletonMssql_upsertGoTpl,
	"templates_test/singleton/mssql_main_test.go.tpl":   templates_testSingletonMssql_main_testGoTpl,
	"templates_test/singleton/mssql_suites_test.go.tpl": templates_testSingletonMssql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                      templates_testUpsertGoTpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"17_upsert.go.tpl": {templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": {nil, map[string]*bintree{
			"mssql_upsert.go.tpl": {templatesSingletonMssql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": {nil, map[string]*bintree{
		"singleton": {nil, map[string]*bintree{
			"mssql_main_test.go.tpl":   {templates_testSingletonMssql_main_testGoTpl, map[string]*bintree{}},
			"mssql_suites_test.go.tpl": {templates_testSingletonMssql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": {templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
